name: Runtime Tests

on:
  workflow_dispatch:
  pull_request_target:
    types: [opened, reopened, closed, synchronize, labeled, unlabeled]
    paths:
      - 'tests/**'
      - 'cores/**'
      - 'libraries/**'
      - '!libraries/**.md'
      - '!libraries/**.txt'
      - '!libraries/**.properties'
      - 'package/**'
  schedule:
    - cron: '0 2 * * *'

concurrency:
  group: tests-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# To avoid giving elevated permissions to the entire workflow, specify default permissions at the top level
# and then override them for specific jobs.
permissions: { contents: read }

jobs:
  gen-matrix:
    name: Generate matrix
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    outputs:
      build-types: ${{ steps.set-matrix.outputs.build-types }}
      hw-types: ${{ steps.set-matrix.outputs.hw-types }}
      wokwi-types: ${{ steps.set-matrix.outputs.wokwi-types }}
      qemu-types: ${{ steps.set-matrix.outputs.qemu-types }}
    steps:
      - name: Set matrix
        id: set-matrix
        run: |
          build_types='["validation"'
          hw_types='["validation"'
          wokwi_types='["validation"'
          qemu_types='["validation"'

          is_pr=${{ github.event.pull_request.number != null }}
          is_performance_enabled=${{ contains(github.event.pull_request.labels.*.name, 'perf_test') }}

          if [[ $is_pr != 'true' ]] || [[ $is_performance_enabled == 'true' ]]; then
            build_types+=',"performance"'
            hw_types+=',"performance"'
            #wokwi_types+=',"performance"'
            #qemu_types+=',"performance"'
          fi

          echo "build-types=$build_types]" >> $GITHUB_OUTPUT
          echo "hw-types=$hw_types]" >> $GITHUB_OUTPUT
          echo "wokwi-types=$wokwi_types]" >> $GITHUB_OUTPUT
          echo "qemu-types=$qemu_types]" >> $GITHUB_OUTPUT

  call-build-tests:
    name: Build
    uses: espressif/arduino-esp32/.github/workflows/build_tests.yml@master
    needs: gen-matrix
    if: github.event.action != 'closed'
    strategy:
      matrix:
        type: ${{ fromJson(needs.gen-matrix.outputs.build-types) }}
        chip: ['esp32', 'esp32s2', 'esp32s3', 'esp32c3', 'esp32c6', 'esp32h2']
    with:
      type: ${{ matrix.type }}
      chip: ${{ matrix.chip }}

  call-hardware-tests:
    name: Hardware
    uses: espressif/arduino-esp32/.github/workflows/hw.yml@master
    needs: [gen-matrix, call-build-tests]
    if: |
      github.repository == 'espressif/arduino-esp32' &&
      (github.event_name != 'pull_request_target' ||
      contains(github.event.pull_request.labels.*.name, 'hil_test'))
    strategy:
      fail-fast: false
      matrix:
        type: ${{ fromJson(needs.gen-matrix.outputs.hw-types) }}
        chip: ['esp32', 'esp32s2', 'esp32s3', 'esp32c3', 'esp32c6', 'esp32h2']
    with:
      type: ${{ matrix.type }}
      chip: ${{ matrix.chip }}

  call-wokwi-tests:
    name: Wokwi
    uses: espressif/arduino-esp32/.github/workflows/wokwi.yml@master
    needs: [gen-matrix, call-build-tests]
    if: github.event.action != 'closed'
    strategy:
      fail-fast: false
      matrix:
        type: ${{ fromJson(needs.gen-matrix.outputs.wokwi-types) }}
        chip: ['esp32', 'esp32s2', 'esp32s3', 'esp32c3', 'esp32c6', 'esp32h2']
    secrets:
      WOKWI_CLI_TOKEN: ${{ secrets.WOKWI_CLI_TOKEN }}
    with:
      type: ${{ matrix.type }}
      chip: ${{ matrix.chip }}

  # This job is disabled for now
  call-qemu-tests:
    name: QEMU
    uses: espressif/arduino-esp32/.github/workflows/qemu.yml@master
    needs: [gen-matrix, call-build-tests]
    if: false
    strategy:
      fail-fast: false
      matrix:
        type: ${{ fromJson(needs.gen-matrix.outputs.qemu-types) }}
        chip: ['esp32', 'esp32c3']
    with:
      type: ${{ matrix.type }}
      chip: ${{ matrix.chip }}

  unit-test-results:
    name: Unit Test Results
    needs: [call-hardware-tests, call-wokwi-tests, call-qemu-tests]
    if: always() && github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest
    permissions:
        checks: write
        pull-requests: write
    steps:
      - name: Download and Extract HW Artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          merge-multiple: true
          pattern: tests-results-hw-*
          path: ./results/hw

      - name: Download and Extract Wokwi Artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          merge-multiple: true
          pattern: tests-results-wokwi-*
          path: ./results/wokwi

      - name: Download and Extract QEMU Artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          merge-multiple: true
          pattern: tests-results-qemu-*
          path: ./results/qemu

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          commit: ${{ github.event.pull_request.head.sha || github.sha }}
          files: ./results/**/*.xml
  clean:
    name: Clean objects
    needs: unit-test-results
    if: always()
    permissions:
      actions: write
    runs-on: ubuntu-latest
    steps:
      - name: Clean up caches
        uses: actions/github-script@v7
        with:
          script: |
            const ref = '${{ github.event.pull_request.number || github.ref }}';
            const key_prefix = 'tests-' + ref + '-';

            if ('${{ github.event_name }}' == 'pull_request_target' && '${{ github.event.action }}' != 'closed') {
              console.log('Skipping cache cleanup for open PR');
              return;
            }

            await github.paginate(github.rest.actions.getActionsCacheList, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
              key: key_prefix
            }).then(caches => {
              if (caches) {
                for (const cache of caches) {
                  console.log(`Deleting cache: ${cache.key}`);
                  github.rest.actions.deleteActionsCacheById({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    cache_id: cache.id
                  });
                }
              }
            });
